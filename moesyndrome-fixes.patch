diff --git a/libbcachefs/bset.c b/libbcachefs/bset.c
index 1c7318c6e46f..3dc14910d228 100644
--- a/libbcachefs/bset.c
+++ b/libbcachefs/bset.c
@@ -604,11 +604,10 @@ static inline unsigned bkey_mantissa(const struct bkey_packed *k,
 	return (u16) v;
 }
 
-__always_inline
-static inline void __make_bfloat(struct btree *b, struct bset_tree *t,
-				 unsigned j,
-				 struct bkey_packed *min_key,
-				 struct bkey_packed *max_key)
+static __always_inline void __make_bfloat(struct btree *b, struct bset_tree *t,
+					  unsigned j,
+					  struct bkey_packed *min_key,
+					  struct bkey_packed *max_key)
 {
 	struct bkey_float *f = bkey_float(b, t, j);
 	struct bkey_packed *m = tree_to_bkey(b, t, j);
@@ -1190,19 +1189,14 @@ static struct bkey_packed *bset_search_write_set(const struct btree *b,
 static inline void prefetch_four_cachelines(void *p)
 {
 #ifdef CONFIG_X86_64
-	asm(".intel_syntax noprefix;"
-	    "prefetcht0 [%0 - 127 + 64 * 0];"
-	    "prefetcht0 [%0 - 127 + 64 * 1];"
-	    "prefetcht0 [%0 - 127 + 64 * 2];"
-	    "prefetcht0 [%0 - 127 + 64 * 3];"
-	    ".att_syntax prefix;"
-	    :
-	    : "r" (p + 127));
-#else
+	asm(".intel_syntax noprefix");
+#endif
 	prefetch(p + L1_CACHE_BYTES * 0);
 	prefetch(p + L1_CACHE_BYTES * 1);
 	prefetch(p + L1_CACHE_BYTES * 2);
 	prefetch(p + L1_CACHE_BYTES * 3);
+#ifdef CONFIG_X86_64
+	asm(".att_syntax prefix");
 #endif
 }
 
@@ -1399,7 +1393,7 @@ void bch2_btree_node_iter_push(struct btree_node_iter *iter,
 	bch2_btree_node_iter_sort(iter, b);
 }
 
-noinline __flatten __attribute__((cold))
+noinline __flatten __cold
 static void btree_node_iter_init_pack_failed(struct btree_node_iter *iter,
 			      struct btree *b, struct bpos *search)
 {
@@ -1455,7 +1449,7 @@ static void btree_node_iter_init_pack_failed(struct btree_node_iter *iter,
  *    So we've got to search for start_of_range, then after the lookup iterate
  *    past any extents that compare equal to the position we searched for.
  */
-__flatten
+__flatten __cold
 void bch2_btree_node_iter_init(struct btree_node_iter *iter,
 			       struct btree *b, struct bpos *search)
 {
diff --git a/libbcachefs/btree_gc.c b/libbcachefs/btree_gc.c
index 6b06f6079908..e39b2acc99ac 100644
--- a/libbcachefs/btree_gc.c
+++ b/libbcachefs/btree_gc.c
@@ -210,9 +210,9 @@ static int bch2_gc_btree(struct bch_fs *c, enum btree_id btree_id,
 	struct btree_trans trans;
 	struct btree_iter *iter;
 	struct btree *b;
-	unsigned depth = metadata_only			? 1
-		: bch2_expensive_debug_checks		? 0
-		: !btree_node_type_needs_gc(btree_id)	? 1
+	unsigned depth = metadata_only						? 1
+		: bch2_expensive_debug_checks					? 0
+		: !btree_node_type_needs_gc((enum btree_node_type)btree_id)	? 1
 		: 0;
 	u8 max_stale = 0;
 	int ret = 0;
@@ -330,9 +330,9 @@ static int bch2_gc_btree_init(struct bch_fs *c,
 			      bool metadata_only)
 {
 	struct btree *b;
-	unsigned target_depth = metadata_only		? 1
-		: bch2_expensive_debug_checks		? 0
-		: !btree_node_type_needs_gc(btree_id)	? 1
+	unsigned target_depth = metadata_only					? 1
+		: bch2_expensive_debug_checks					? 0
+		: !btree_node_type_needs_gc((enum btree_node_type)btree_id)	? 1
 		: 0;
 	u8 max_stale = 0;
 	int ret = 0;
@@ -1205,7 +1205,7 @@ static void bch2_coalesce_nodes(struct bch_fs *c, struct btree_iter *iter,
 		delete.k.p = old_nodes[i]->key.k.p;
 		bch2_keylist_add_in_order(&keylist, &delete);
 next:
-		i = i;
+		continue;
 	}
 
 	/*
diff --git a/libbcachefs/btree_io.h b/libbcachefs/btree_io.h
index 1a4b11e99cc4..67b09e532755 100644
--- a/libbcachefs/btree_io.h
+++ b/libbcachefs/btree_io.h
@@ -219,7 +219,7 @@ static inline void compat_btree_node(unsigned level, enum btree_id btree_id,
 				     struct btree_node *bn)
 {
 	if (version < bcachefs_metadata_version_inode_btree_change &&
-	    btree_node_type_is_extents(btree_id) &&
+	    btree_node_type_is_extents((enum btree_node_type)btree_id) &&
 	    bkey_cmp(bn->min_key, POS_MIN) &&
 	    write)
 		bn->min_key = bkey_predecessor(bn->min_key);
@@ -228,7 +228,7 @@ static inline void compat_btree_node(unsigned level, enum btree_id btree_id,
 	compat_bpos(level, btree_id, version, big_endian, write, &bn->max_key);
 
 	if (version < bcachefs_metadata_version_inode_btree_change &&
-	    btree_node_type_is_extents(btree_id) &&
+	    btree_node_type_is_extents((enum btree_node_type)btree_id) &&
 	    bkey_cmp(bn->min_key, POS_MIN) &&
 	    !write)
 		bn->min_key = bkey_successor(bn->min_key);
diff --git a/libbcachefs/btree_iter.c b/libbcachefs/btree_iter.c
index 4d825cac22ce..fc15542ef19e 100644
--- a/libbcachefs/btree_iter.c
+++ b/libbcachefs/btree_iter.c
@@ -539,7 +539,7 @@ static void bch2_btree_iter_verify_level(struct btree_iter *iter,
 	 * For extents, the iterator may have skipped past deleted keys (but not
 	 * whiteouts)
 	 */
-	p = level || btree_node_type_is_extents(iter->btree_id)
+	p = level || btree_iter_is_extents(iter)
 		? bch2_btree_node_iter_prev_filter(&tmp, l->b, KEY_TYPE_discard)
 		: bch2_btree_node_iter_prev_all(&tmp, l->b);
 	k = bch2_btree_node_iter_peek_all(&l->iter, l->b);
@@ -720,8 +720,7 @@ static void __bch2_btree_node_iter_fix(struct btree_iter *iter,
 	 */
 	if (!bch2_btree_node_iter_end(node_iter) &&
 	    iter_current_key_modified &&
-	    (b->c.level ||
-	     btree_node_type_is_extents(iter->btree_id))) {
+	    (b->c.level || btree_iter_is_extents(iter))) {
 		struct bset_tree *t;
 		struct bkey_packed *k, *k2, *p;
 
@@ -1964,7 +1963,7 @@ static inline void bch2_btree_iter_init(struct btree_trans *trans,
 	struct bch_fs *c = trans->c;
 	unsigned i;
 
-	if (btree_node_type_is_extents(btree_id) &&
+	if (btree_node_type_is_extents((enum btree_node_type)btree_id) &&
 	    !(flags & BTREE_ITER_NODES))
 		flags |= BTREE_ITER_IS_EXTENTS;
 
@@ -2161,7 +2160,7 @@ struct btree_iter *__bch2_trans_get_iter(struct btree_trans *trans,
 		__btree_trans_get_iter(trans, btree_id, pos, flags);
 
 	__bch2_btree_iter_set_pos(iter, pos,
-		btree_node_type_is_extents(btree_id));
+		btree_node_type_is_extents((enum btree_node_type)btree_id));
 	return iter;
 }
 
diff --git a/libbcachefs/btree_update_leaf.c b/libbcachefs/btree_update_leaf.c
index c490df4709ba..2ddd4e43806f 100644
--- a/libbcachefs/btree_update_leaf.c
+++ b/libbcachefs/btree_update_leaf.c
@@ -407,7 +407,7 @@ bch2_trans_commit_write_locked(struct btree_trans *trans,
 			return ret;
 		}
 
-		if (btree_node_type_needs_gc(i->iter->btree_id))
+		if (btree_node_type_needs_gc(btree_iter_key_type(i->iter)))
 			marking = true;
 	}
 
@@ -988,7 +988,7 @@ int bch2_trans_update(struct btree_trans *trans, struct btree_iter *iter,
 
 	iter->flags |= BTREE_ITER_KEEP_UNTIL_COMMIT;
 
-	if (btree_node_type_is_extents(iter->btree_id)) {
+	if (btree_iter_is_extents(iter)) {
 		iter->pos_after_commit = k->k.p;
 		iter->flags |= BTREE_ITER_SET_POS_AFTER_COMMIT;
 	}
@@ -1122,7 +1122,7 @@ int bch2_btree_delete_range_trans(struct btree_trans *trans, enum btree_id id,
 		 */
 		delete.k.p = iter->pos;
 
-		if (btree_node_type_is_extents(iter->btree_id)) {
+		if (btree_iter_is_extents(iter)) {
 			unsigned max_sectors =
 				KEY_SIZE_MAX & (~0 << trans->c->block_bits);
 
diff --git a/libbcachefs/buckets.c b/libbcachefs/buckets.c
index 8bbf958d64e4..718b799a8fad 100644
--- a/libbcachefs/buckets.c
+++ b/libbcachefs/buckets.c
@@ -1392,13 +1392,13 @@ int bch2_mark_update(struct btree_trans *trans,
 	if (unlikely(flags & BTREE_TRIGGER_NORUN))
 		return 0;
 
-	if (!btree_node_type_needs_gc(iter->btree_id))
+	if (!btree_node_type_needs_gc(btree_iter_key_type(iter)))
 		return 0;
 
 	bkey_init(&unpacked);
 	old = (struct bkey_s_c) { &unpacked, NULL };
 
-	if (!btree_node_type_is_extents(iter->btree_id)) {
+	if (!btree_iter_is_extents(iter)) {
 		/* iterators should be uptodate, shouldn't get errors here: */
 		if (btree_iter_type(iter) != BTREE_ITER_CACHED) {
 			old = bch2_btree_iter_peek_slot(iter);
@@ -1548,7 +1548,7 @@ static struct btree_iter *trans_get_update(struct btree_trans *trans,
 
 	trans_for_each_update(trans, i)
 		if (i->iter->btree_id == btree_id &&
-		    (btree_node_type_is_extents(btree_id)
+		    (btree_iter_is_extents(i->iter)
 		     ? bkey_cmp(pos, bkey_start_pos(&i->k->k)) >= 0 &&
 		       bkey_cmp(pos, i->k->k.p) < 0
 		     : !bkey_cmp(pos, i->iter->pos))) {
@@ -2000,10 +2000,10 @@ int bch2_trans_mark_update(struct btree_trans *trans,
 	if (unlikely(flags & BTREE_TRIGGER_NORUN))
 		return 0;
 
-	if (!btree_node_type_needs_gc(iter->btree_id))
+	if (!btree_node_type_needs_gc(btree_iter_key_type(iter)))
 		return 0;
 
-	if (!btree_node_type_is_extents(iter->btree_id)) {
+	if (!btree_iter_is_extents(iter)) {
 		/* iterators should be uptodate, shouldn't get errors here: */
 		if (btree_iter_type(iter) != BTREE_ITER_CACHED) {
 			old = bch2_btree_iter_peek_slot(iter);
diff --git a/libbcachefs/extents.c b/libbcachefs/extents.c
index c0ae31238b48..4939b51552cf 100644
--- a/libbcachefs/extents.c
+++ b/libbcachefs/extents.c
@@ -234,7 +234,7 @@ void bch2_btree_ptr_v2_compat(enum btree_id btree_id, unsigned version,
 	compat_bpos(0, btree_id, version, big_endian, write, &bp.v->min_key);
 
 	if (version < bcachefs_metadata_version_inode_btree_change &&
-	    btree_node_type_is_extents(btree_id) &&
+	    btree_node_type_is_extents((enum btree_node_type)btree_id) &&
 	    bkey_cmp(bp.v->min_key, POS_MIN))
 		bp.v->min_key = write
 			? bkey_predecessor(bp.v->min_key)
